{"version":3,"file":"index.min.js","sources":["../src/createStore.js"],"sourcesContent":["/*\n * @Author: 祢豆\n * @ModuleName: 2019-12-09 21:32:14\n * @Date: 2019-12-09 21:32:14\n * @Last Modified by: 祢豆\n * @Last Modified time: 2019-12-12 21:25:44\n */\nimport Reflux from \"reflux\";\n// 返回的action 改成 dispatch\n// 改写 effect方法\n// 改写reducer方法\n// 改写request\nconst createStore = (...registerModels) => {\n    let StateCache = {};\n    let actionTypes = [];\n    let actionsCache = {};\n    let reducersCache = {};\n\n    registerModels.forEach(model => {\n        const { namespace, state, effects, reducers } = model;\n\n        // actions\n        Object.keys(effects || {}).forEach(key => {\n            const keyPrefix = `on${namespace.replace(/^\\S/, s => s.toUpperCase())}/${key}`;\n            actionsCache = Object.assign(actionsCache, { [keyPrefix]: effects[key] });\n        });\n\n        // reducer\n        Object.keys(reducers || {}).forEach(key => {\n            const keyPrefix = `on${namespace.replace(/^\\S/, s => s.toUpperCase())}/${key}`;\n            reducersCache = Object.assign(reducersCache, {\n                [keyPrefix]: reducers[key],\n            });\n        });\n\n        // state\n        StateCache = Object.assign(StateCache, state);\n\n        // actionTypes\n        const actionsTypesPrefix = Object.keys(effects || {}).map(key => `${namespace}/${key}`);\n        actionTypes = actionTypes.concat(actionsTypesPrefix);\n    });\n\n    const listenActions = Reflux.createActions(actionTypes);\n    class Store extends Reflux.Store {\n        constructor() {\n            super();\n            this.state = StateCache;\n            this.listenToMany(listenActions);\n        }\n    }\n    Object.keys(Object.assign(actionsCache, reducersCache)).forEach(key => {\n        Store.prototype[key] = actionsCache[key];\n    });\n\n    // prefix 前缀 检测 type dispatch namespace\n    // export connect dipatch\n    // effects 里 有 put select call\n    // reducer 自动调用 setState\n    return { Store, Actions: listenActions };\n};\n\nexport default createStore;\n"],"names":["createStore","StateCache","actionTypes","actionsCache","reducersCache","registerModels","forEach","model","namespace","state","effects","reducers","Object","keys","key","keyPrefix","replace","s","toUpperCase","assign","actionsTypesPrefix","map","concat","listenActions","Reflux","createActions","Store","listenToMany","prototype","Actions"],"mappings":"+sCAYA,IAAMA,YAAc,mBACZC,EAAa,GACbC,EAAc,GACdC,EAAe,GACfC,EAAgB,sBAJAC,2BAAAA,kBAMpBA,EAAeC,SAAQ,SAAAC,OACXC,EAAwCD,EAAxCC,UAAWC,EAA6BF,EAA7BE,MAAOC,EAAsBH,EAAtBG,QAASC,EAAaJ,EAAbI,SAGnCC,OAAOC,KAAKH,GAAW,IAAIJ,SAAQ,SAAAQ,OACzBC,cAAiBP,EAAUQ,QAAQ,OAAO,SAAAC,UAAKA,EAAEC,6BAAkBJ,GACzEX,EAAeS,OAAOO,OAAOhB,qBAAiBY,EAAYL,EAAQI,QAItEF,OAAOC,KAAKF,GAAY,IAAIL,SAAQ,SAAAQ,OAC1BC,cAAiBP,EAAUQ,QAAQ,OAAO,SAAAC,UAAKA,EAAEC,6BAAkBJ,GACzEV,EAAgBQ,OAAOO,OAAOf,qBACzBW,EAAYJ,EAASG,QAK9Bb,EAAaW,OAAOO,OAAOlB,EAAYQ,OAGjCW,EAAqBR,OAAOC,KAAKH,GAAW,IAAIW,KAAI,SAAAP,mBAAUN,cAAaM,MACjFZ,EAAcA,EAAYoB,OAAOF,UAG/BG,EAAgBC,OAAOC,cAAcvB,GACrCwB,mIAGOjB,MAAQR,IACR0B,aAAaJ,wBAJNC,OAAOE,mBAO3Bd,OAAOC,KAAKD,OAAOO,OAAOhB,EAAcC,IAAgBE,SAAQ,SAAAQ,GAC5DY,EAAME,UAAUd,GAAOX,EAAaW,MAOjC,CAAEY,MAAAA,EAAOG,QAASN"}